var glob = require('glob');
var Promise = require('bluebird');
var director = require('director');
var fs = require('fs');
var cliff = require('cliff');


var debug = require('debug')('lifesaver');
var daemons = {};
var router = new director.http.Router();

var Ignored = function() {
    Error.apply(this, arguments);
};
Ignored.prototype = Object.create(Error.prototype);

var Fatal = function() {
    Error.apply(this, arguments);
};
Fatal.prototype = Object.create(Error.prototype);

router.post('/cron', function() {
    this.res.end('ok');

    Object.keys(daemons).forEach(function (name) {
        if (!daemons[name].detector) return;
        if (daemons[name].stop) return;

        daemons[name].detector.detect()
            .finally(function (arg) {
                debug('detect %s finished', name);
            })
            .done()
        ;
    });
});

router.get('/daemon', function() {
    this.res.end(Object.keys(daemons).map(function(name) {
        return [name, daemons[name].path].join(' ');
    }).join("\r\n"));
});

router.get(/daemon\/(.+)/, function(name) {
    tapDaemon(this.res, name, function(daemon) {
        return cliff.inspect(daemon);
    });
});

router.post(/daemon\/(.+)\/stop/, function (name) {
    tapDaemon(this.res, name, function (daemon) {
        return Promise.cast(daemon.main.stop())
            .return('stopped');
    });
});

router.post(/daemon\/(.+)\/start/, function (name) {
    tapDaemon(this.res, name, function (daemon) {
        return Promise.cast(daemon.main.boot())
            .return('booted');
    });
});

router.post(/daemon\/(.+)\/reboot/, function (name) {
    tapDaemon(this.res, name, function (daemon) {
        return Promise.cast(daemon.main.stop())
            .delay(100)
            .then(function() {
                daemon.main.boot();
            })
            .return('rebooted');
    });
});

router.post(/daemon\/(.+)\/remove/, function (name) {
    tapDaemon(this.res, name, function (daemon) {
        return Promise.cast(daemon.main.stop())
            .then(function() {
                delete daemons[name];
            })
            .return('removeds');
    });
});

router.put(/daemon(\/.+)/, function(path) {
    var res = this.res;
    var req = this.req;

    addDaemon(path)
        .tap(function() {
            res.end('ok');
        })
        .then(function(saver) {
            var fname = saver.name.replace(/[^a-zA-Z0-9\-_.]/g, '_');
            var fcontent = "//auto generated by lifesaver\n\nmodule.exports = require('" + path + "');\n";

            return p(fs, 'writeFile')(req.config.workspace + '/daemon/' + fname + '.saver.js', fcontent);
        })
        .catch(Fatal, function(e) {
            debug('daemon %s faild to boot. %s', path, e + (e.stack || ''));
            res.statusCode = 500;
            res.end(e && e.message);

            var child_process = require('child_process');
            debug('try to fork another daemon');
            child_process.fork(__dirname + '/../bin/daemon');
            process.nextTick(function() {
                process.exit(-1);//fatal
            });
        })
        .catch(Ignored, function() {
            res.statusCode = 403;
            res.end('exist');

            return true;
        })
        .catch(function(e) {
            debug('daemon %s faild to boot. %s', path, e + (e.stack || ''));
            res.statusCode = 500;
            res.end(e && e.message);
        })
        .done();
});


module.exports = function(config) {
    var root = config.daemon_path || (config.workspace + '/daemon');
    var files = glob.sync(root + '/**/*.saver.js');

    return Promise.all(files.map(addDaemon)).return(handler);

    function handler(req, res) {
        debug(['incoming', req.method, req.url].join(' '));
        req.config = config;
        router.dispatch(req, res, function (err) {
            if (err) {
                res.statusCode = 404;
                res.end('Not Found.');
            }
        });
    }
};

function addDaemon(path) {
    debug('trying to add new daemon %s', path);

    return Promise
        .try(function() {
            return Promise.cast(require(path)(require('../')));
        })
        .catch(function() {
            throw new Fatal("module is not a saver daemon");
        })
        .then(function(saver) {
            var Daemon = require('../modules/daemon');
            if(!saver instanceof Daemon) {
                throw new Fatal("module is not a saver daemon");
            }

            if(daemons[saver.name]) {
                debug('daemon with name <%s> already exist. ignored', saver.name);
                throw new Ignored();
            }

            daemons[saver.name] = saver;
            saver.path = path;

            return Promise.cast(daemons[saver.name].main.boot()).return(saver);
        })
        .then(function(saver) {
            debug('daemon %s booted', saver.name);
            return saver;
        })
    ;
}

function p(obj, name) {
    return Promise.promisify(obj[name].bind(obj));
}

function tapDaemon(res, name, cb) {
    Promise.cast(daemons[name])
        .then(function (daemon) {
            if (!daemon) {
                return Promise.reject(new director.http.BadRequest('specified daemon not exist'));
            }

            return cb(daemon);
        })
        .then(function (msg) {
            res.end(msg);
        })
        .catch(function (e) {
            res.statusCode = e.statusCode || 500;
            res.end(e && e.message);
        })
        .done();
}